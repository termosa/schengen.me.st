{"version":3,"sources":["Calendar.jsx","countSelected.js","Summary.jsx","compareDates.js","useStorage.js","storage.js","date.js","today.js","cleanOutdatedDates.js","queryParams.js","settings.js","useSelectedDates.js","findDate.js","useSchengenDays.js","collectDays.js","App.jsx","serviceWorker.js","index.js"],"names":["monthsNames","dayClassName","day","date","month","outOfRange","available","selected","today","Calendar","days","toggleSelection","className","times","fn","results","i","push","repeat","key","map","Fragment","year","d","undefined","toString","Math","random","onClick","countSelected","filter","length","Summary","orderedDateProps","compareDates","leftDate","rightDate","prop","storage","prefix","set","value","localStorage","setItem","JSON","stringify","get","defaultValue","hasOwnProperty","parse","getItem","createStorage","useStorage","useState","newValue","dateToString","this","Date","getFullYear","getMonth","getDate","getDay","now","cleanOutdatedDates","dates","daysLimit","getToday","startOfSchengenPeriod","minimalDate","queryString","window","location","search","slice","query","split","reduce","params","param","Object","assign","str","SCHENGEN_RANGE","queryParams","range","MAX_DAYS_IN_SCHENGEN","max","floor","SCHENGEN_SCHEDULE_DAYS","useSelectedDates","selectedDates","updateSelectedDays","useEffect","relevantSelectedDates","findDate","find","originalDays","firstDay","prevDay","unshift","lastDay","nextDay","collectDays","resetAvailability","useSchengenDays","update","markWithSelect","rangesAvailability","countRangesAvailability","ii","todayIndex","bottomEdge","minOfRange","min","last","s","next","App","selectedDate","concat","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18be5e19.chunk.js","sourcesContent":["import React from 'react';\nimport './Calendar.css';\n\nconst monthsNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nconst formatMonth = d => `${monthsNames[d.month]} ${d.year}`;\n\nconst dayClassName = day => `Day ${day.date.month % 2 ? 'Day-Odd' : 'Day-Even'}${day.outOfRange || day.available < 1 ? ' Day-Disabled' : ''}${day.selected ? ' Day-Selected' : ''}${day.today ? ' Day-Today' : ''}`;\n\nconst repeat = (times, fn) => {\n  const results = [];\n  for (let i = 1; i <= times; i++)\n    results.push(fn(i));\n  return results;\n};\n\n/**\n * @param {object} props\n * @param {Array<Day>} props.days\n * @param {(day: Day) => void} props.toggleSelection\n */\nconst Calendar = ({ days, toggleSelection }) => (\n  <div className=\"Calendar\">\n    <div className=\"Calendar-List\">\n      {repeat(days[0].date.day, i => <div key={i} className=\"Day Day-Empty\"></div>)}\n      {days.map(day => (\n        <React.Fragment key={`${day.date.year}-${day.date.month}-${day.date.date}`}>\n          {day.date.date === 1\n            ? <div className=\"Month\">{formatMonth(day.date)}</div>\n            : undefined}\n          <div key={day.date.toString() + Math.random()}\n            className={dayClassName(day)}\n            onClick={() => day.outOfRange || day.available < 1 || toggleSelection(day)}\n          >\n            {day.date.date}\n            {/* {<small className=\"Day_Available\">&nbsp;{day.ratio}</small>} */}\n            {day.available > 1 ? <small className=\"Day_Available\">+{day.available - 1}</small> : undefined}\n          </div>\n        </React.Fragment>\n      ))}\n    </div>\n  </div>\n);\n\nexport default Calendar;\n","const countSelected = days => days.filter(d => d.selected).length;\n\nexport default countSelected;","import React from 'react';\nimport './Summary.css';\nimport countSelected from './countSelected';\n\nconst Summary = ({ days }) => (\n  <div className=\"Summary\">\n    <div className=\"Summary-Section\">\n      <span>{countSelected(days)}</span>\n      <span className=\"Summary-Label\">Days in Schengen</span>\n    </div>\n  </div>\n);\n\nexport default Summary;","const orderedDateProps = ['year', 'month', 'date'];\n\n/**\n * @param {DatePointer} leftDate\n * @param {DatePointer} rightDate\n * @returns {ComparisonResult}\n */\nconst compareDates = (leftDate, rightDate) => {\n  for (let prop of orderedDateProps) {\n    if (leftDate[prop] < rightDate[prop]) return -1;\n    if (leftDate[prop] > rightDate[prop]) return 1;\n  }\n  return 0;\n};\n\nexport default compareDates;","import { useState } from 'react';\nimport createStorage from './storage';\n\nconst storage = createStorage('schengen');\n\n/**\n * @param {string} key\n * @param {function | any} [defaultValue]\n */\nconst useStorage = (key, defaultValue) => {\n  const [value, set] = useState(storage.get(key, defaultValue));\n  \n  const update = newValue => {\n    storage.set(key, newValue);\n    set(newValue);\n  };\n\n  return [value, update];\n};\n\nexport default useStorage;","const createStorage = prefix => ({\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  set(key, value) {\n    localStorage.setItem(`${prefix}/${key}`, JSON.stringify(value));\n  },\n  \n  /**\n   * @param {string} key\n   * @param {function | any} defaultValue \n   */\n  get(key, defaultValue) {\n    if (localStorage.hasOwnProperty(`${prefix}/${key}`))\n      return JSON.parse(localStorage.getItem(`${prefix}/${key}`))\n    return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n  }\n});\n\nexport default createStorage;","const dateToString = function () {\n  return `${this.year}-${this.month + 1}-${this.date}`;\n};\n\n/**\n * @param {number} year\n * @param {number} month\n * @param {number} date\n * @returns {FlatDate}\n */\nconst date = (year, month, date) => {\n  const d = new Date(year, month, date);\n  return {\n    year: d.getFullYear(),\n    month: d.getMonth(),\n    date: d.getDate(),\n    day: d.getDay(),\n    toString: dateToString\n  };\n};\n\nexport default date;","import date from './date';\n\nconst today = () => {\n  const now = new Date();\n  return date(now.getFullYear(), now.getMonth(), now.getDate());\n};\n\nexport default today;","import compareDates from './compareDates';\nimport getToday from './today';\n\nconst cleanOutdatedDates = (dates, daysLimit) => {\n  const today = getToday();\n  const startOfSchengenPeriod = new Date(today.year, today.month, today.date - daysLimit);\n  const minimalDate = {\n    year: startOfSchengenPeriod.getFullYear(),\n    month: startOfSchengenPeriod.getMonth(),\n    date: startOfSchengenPeriod.getDate()\n  };\n  return dates.filter(date => compareDates(minimalDate, date) <= 0);\n};\n\nexport default cleanOutdatedDates;","const queryString = window.location.search.slice(1);\n\nconst toObj = str => ({ [str.split('=')[0]]: str.split('=')[1] });\n\n/** @type {{ [key: string]: any }} */\nconst query = queryString\n  ? queryString.split('&').reduce((params, param) => Object.assign(params, toObj(param)), {})\n  : {};\n\nexport default query;","import queryParams from './queryParams';\n\nexport const SCHENGEN_RANGE = queryParams.range ? +queryParams.range : 180;\nexport const MAX_DAYS_IN_SCHENGEN = queryParams.max\n  ? +queryParams.max\n  : (queryParams.range ? Math.floor(queryParams.range / 2) : 90);\nexport const SCHENGEN_SCHEDULE_DAYS = SCHENGEN_RANGE * (queryParams.repeat ? +queryParams.repeat : 4);","import { useEffect } from 'react';\nimport useStorage from './useStorage';\nimport cleanOutdatedDates from './cleanOutdatedDates';\nimport { SCHENGEN_RANGE } from './settings';\n\nconst useSelectedDates = () => {\n  const [selectedDates, updateSelectedDays] = useStorage('selectedDates', []);\n  useEffect(() => {\n    const relevantSelectedDates = cleanOutdatedDates(selectedDates, SCHENGEN_RANGE);\n    if (selectedDates.length !== relevantSelectedDates.length)\n      updateSelectedDays(relevantSelectedDates);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  return [selectedDates, updateSelectedDays];\n};\n\nexport default useSelectedDates;","import compareDates from './compareDates';\n\n/**\n * @param {Array<DatePointer>} dates\n * @param {DatePointer} date \n */\nconst findDate = (dates, date) => dates.find(d => compareDates(date, d) === 0);\n\nexport default findDate;","import { useState, useEffect } from 'react';\nimport collectDays from './collectDays';\nimport findDate from './findDate';\nimport { MAX_DAYS_IN_SCHENGEN, SCHENGEN_RANGE } from './settings';\n\nconst originalDays = collectDays();\n\n/**\n * @param {Array<DatePointer>} selectedDates\n * @returns {(day: Day) => Day}\n */\nconst markWithSelect = selectedDates => day => {\n  return findDate(selectedDates, day.date)\n    ? { ...day, selected: true }\n    : day;\n};\n\n/**\n * @param {Day} day\n * @returns {Day}\n */\nconst resetAvailability = day => ({\n  ...day,\n  available: day.outOfRange ? 0 : 1\n});\n\nconst countRangesAvailability = days => {\n  let available = MAX_DAYS_IN_SCHENGEN;\n  for (let i = 0; i < SCHENGEN_RANGE; i++) {\n    if (days[i].selected)\n      available--;\n  }\n\n  const rangesAvailability = [available];\n  for (let i = 1; i < days.length; i++) {\n    if (days[i - 1].selected)\n      available++;\n    if (days[i + SCHENGEN_RANGE - 1] &&days[i + SCHENGEN_RANGE - 1].selected)\n      available--;\n      rangesAvailability.push(available);\n  }\n\n  // console.log(rangesAvailability);\n  return rangesAvailability;\n};\n\n/**\n * @param {Array<DatePointer>} selectedDates\n * @returns {Array<Day>}\n */\nconst useSchengenDays = (selectedDates) => {\n  const [days, update] = useState(originalDays);\n  useEffect(() => {\n    const days = originalDays\n      .map(markWithSelect(selectedDates))\n      .map(resetAvailability);\n\n    const rangesAvailability = countRangesAvailability(days);\n\n    (() => { // Filter unavailable days\n      for (let i = 0; i < rangesAvailability.length; i++) {\n        if (rangesAvailability[i] > 0)\n          continue;\n\n        for (let ii = SCHENGEN_RANGE; ii--;) {\n          if (!days[i + ii].selected)\n            days[i + ii].available = -1;\n        }\n      }\n    })();\n\n    // (() => { // Count availability\n    //   for (let i = days.length - 1; !days[i + 1] || !days[i + 1].today; i--) {\n    //     const bottomEdge = i - SCHENGEN_RANGE + 1 <= 0 ? 0 : i - SCHENGEN_RANGE + 1;\n    //     const minOfRange = Math.min(...rangesAvailability.slice(bottomEdge, i + 1));\n    //     days[i].available = minOfRange + (days[i].selected ? 1 : 0);\n\n    //     const date = days[i].date\n    //     const range = `[${rangesAvailability.slice(bottomEdge, i)}]`;\n    //     const ratio = `${minOfRange}/${rangesAvailability[i]}`;\n    //     console.log(`%c${date}%c\\t${range}\\t%c${ratio}`, `color: ${days[i].selected ? 'gold' : 'inherit'}`, 'font-weight: normal', minOfRange !== rangesAvailability[i] ? 'color:orange' : '');\n    //     days[i].ratio2 = ratio;\n    //     days[i].ratio = `${minOfRange + (days[i].selected ? 1 : 0)}/${rangesAvailability[i] + (days[i].selected ? 1 : 0)}`;\n    //   }\n    // })();\n\n    (() => { // Count availability\n      let todayIndex = 0;\n      for (let i = 0; i < days.length; i++) {\n        if (!days[i].today && todayIndex === i) {\n          todayIndex++;\n          continue;\n        }\n        const bottomEdge = i - SCHENGEN_RANGE + 1 <= 0 ? 0 : i - SCHENGEN_RANGE + 1;\n        const minOfRange = Math.min(...rangesAvailability.slice(bottomEdge, i + 1));\n        days[i].available = minOfRange + (days[i].selected ? 1 : 0);\n      }\n\n      for (let i = todayIndex; i < days.length; i++) {\n        let available = days[i].available;\n        if (available < 1)\n          continue;\n\n        let last = available;\n        for (let s = 1; s <= last; s++) {\n          const next = i + s;\n          if (next >= days.length)\n            break;\n\n          if (days[next].selected || days[next].available > (days[next - 1].available - (days[next - 1].selected ? 1 : 0))) {\n            available++;\n            last++;\n          }\n        }\n\n        // days[i].ratio = rangesAvailability[i];\n        // const date = days[i].date\n        // const bottomEdge = i - SCHENGEN_RANGE + 1 <= 0 ? 0 : i - SCHENGEN_RANGE + 1;\n        // const range = `[${rangesAvailability.slice(bottomEdge, i)}]`;\n        // const ratio = `${days[i].available}/${rangesAvailability[i]}`;\n        // console.log(`%c${date}\\t%c${range}\\t${available}\\t%c${ratio}`, `color: ${days[i].selected ? 'gold' : 'inherit'}`, 'font-weight: normal', days[i].available !== rangesAvailability[i] ? 'color:orange' : '');\n\n        days[i].available = available > MAX_DAYS_IN_SCHENGEN ? MAX_DAYS_IN_SCHENGEN : available;\n      }\n    })();\n\n    update(days);\n  }, [selectedDates]);\n\n  return days;\n};\n\nexport default useSchengenDays;","import date from './date';\nimport getToday from './today';\nimport { SCHENGEN_RANGE, SCHENGEN_SCHEDULE_DAYS } from './settings';\n\nconst collectDays = () => {\n  const today = getToday();\n  /** @type {Array<{ date: FlatDate, today?: boolean, outOfRange?: boolean, selected?: boolean }>} */\n  const days = [];\n\n  for (let i = SCHENGEN_RANGE; i--;)\n    days.push({ date: date(today.year, today.month, today.date - i) });\n\n  days[days.length - 1].today = true;\n\n  for (let i = 1; i <= SCHENGEN_SCHEDULE_DAYS; i++)\n    days.push({ date: date(today.year, today.month, today.date + i) });\n\n  do {\n    const firstDay = days[0].date;\n    const prevDay = date(firstDay.year, firstDay.month, firstDay.date - 1);\n    if (prevDay.month !== firstDay.month)\n        break;\n    days.unshift({ date: prevDay, outOfRange: true });\n  } while (true);\n  \n  \n  do {\n    const lastDay = days[days.length - 1].date;\n    const nextDay = date(lastDay.year, lastDay.month, lastDay.date + 1);\n    if (nextDay.month !== lastDay.month)\n        break;\n    days.push({ date: nextDay });\n  } while (true);\n\n  return days;\n};\n\nexport default collectDays;","import React from 'react';\nimport './App.css';\nimport Calendar from './Calendar';\nimport Summary from './Summary';\nimport compareDates from './compareDates';\nimport useSelectedDates from './useSelectedDates';\nimport useSchengenDays from './useSchengenDays';\n\nconst App = () => {\n  const [selectedDates, updateSelectedDays] = useSelectedDates();\n  const days = useSchengenDays(selectedDates);\n\n  /**\n   * @param {Day} day\n   */\n  const toggleSelection = day => {\n    const selectedDate = selectedDates.find(date => !compareDates(date, day.date));\n    if (selectedDate)\n      updateSelectedDays(selectedDates.filter(date => date !== selectedDate));\n    else\n      updateSelectedDays(selectedDates.concat(day.date));\n  };\n\n  return (\n    <div className=\"App\">\n      <Summary days={days} />\n      <Calendar days={days} toggleSelection={toggleSelection} />\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}